package petadoption.api.recommendationEngine;

import lombok.Getter;
import lombok.Setter;
import lombok.extern.log4j.Log4j2;
import petadoption.api.pet.Pet;
import petadoption.api.user.User;

import java.util.*;

/**
 * @author Rafe Loya
 *
 * @see Pet
 * @see PetComparator
 * @see User
 */
@Setter
@Getter
@Log4j2
public class RecommendationEngine {
    /**
     * Default value used to increment / decrement
     */
    public static final int DEFAULT_VAL = 1;

    /**
     * Default value for incrementing after attempting to adopt pet
     */
    public static final int DEFAULT_ADOPT_VAL = 50;

    /**
     * <code>Map.Entry</code> pair representing a pet and its total rating,
     * generated by <code>RecommendationEngine</code>.
     */
    private PriorityQueue<Map.Entry<Pet, Integer>> recommendations;

    public RecommendationEngine() {
        recommendations = new PriorityQueue<>(new PetComparator());
    }

    /**
     * <code>toString()</code> method to print the following:
     * <ul>
     *     <li>pet's ranking</li>
     *     <li>pet's name</li>
     *     <li>pet's rating</li>
     * </ul>
     * for each <code>Pet</code> in the recommendation priority queue
     *
     * @return simple information about pets in recommendation
     */
    public String toStringSimple() {
        StringBuilder builder = new StringBuilder();
        SortedSet<Map.Entry<Pet, Integer>> entries = new TreeSet<>(new PetComparator());
        int i = 1;

        entries.addAll(recommendations);

        for (Map.Entry<Pet, Integer> entry : entries) {
            builder.append("[").append(i).append("] ")
                    .append(entry.getKey().getName())
                    .append(" : ")
                    .append(entry.getValue()).append("\n");
            ++i;
        }

        return builder.toString();
    }

    /**
     * <code>toString()</code> method to print the following:
     * <ul>
     *     <li>pet's ranking</li>
     *     <li>pet's id</li>
     *     <li>pet's name</li>
     *     <li>all of a pet's information (<code>toString()</code> of pet)</li>
     * </ul>
     * for each <code>Pet</code> in the recommendation priority queue
     *
     * @return detailed information about pets in recommendations
     */
    public String toStringDetailed() {
        StringBuilder builder = new StringBuilder();
        SortedSet<Map.Entry<Pet, Integer>> entries = new TreeSet<>(new PetComparator());
        int i = 1;

        entries.addAll(recommendations);

        for (Map.Entry<Pet, Integer> entry : entries) {
            builder.append("[").append(i).append("] ")
                    .append("[").append(entry.getKey().getId()).append("] : ")
                    .append(entry.getKey().getName()).append("\n")
                    .append("========================================\n")
                    .append(entry.getKey())
                    .append("========================================\n\n");
            ++i;
        }

        return builder.toString();
    }

    /**
     * <code>toString()</code> method with two options:
     * <ul>
     *     <li>Simple : pet's ranking, name, and rating</li>
     *     <li>Detailed : pet's ranking, id, name, and all of
     *                    it's information
     *                    (<code>Pet</code>'s
     *                    <code>toString()</code> method)</li>
     * </ul>
     *
     * @param moreDetail whether to display simple or detailed information
     * @return recommended pets by their ranking
     */
    public String toString(boolean moreDetail) {
        if (!moreDetail) {
            return toStringSimple();
        } else {
            return toStringDetailed();
        }
    }

    public static Integer calculatePetRating(Map<String, Integer> prefs, Pet p) {
        Integer rating = 0;

        for (String pa : p.getAttributes()) {
            if (prefs.containsKey(pa)) {
                rating += prefs.get(pa);
            }
        }

        return rating;
    }

    /**
     * Changes a given <code>User</code>'s preferences
     * according to a passed <code>double</code>.
     * <p>
     * This function is intended to be a helper function for
     * <code>ratePet()</code></code> and <code>rateAdoptedPet()</code>,
     * but can be called directly for custom increment / decrement values.
     *
     * @param u         User
     * @param p         <code>Pet</code> to reference criteria from
     * @param updateVal value to increment / decrement criteria ratings by
     */
    public static void updatePreferences(User u, Pet p, int updateVal) {
        for (String pa : p.getAttributes()) {
            if (u.getPreferences().containsKey(pa)) {
                u.getPreferences().put(pa, u.getPreferences().get(pa) + updateVal);
            }
        }
    }

    /**
     * Increments / decrements the ratings in the given <code>User</code>'s
     * preferences mapped by the criteria contained in a passed
     * <code>Pet</code> instance.
     *
     * @param u    User
     * @param p    <code>Pet</code> to reference criteria from
     * @param like If the <code>User</code> liked the pet
     */
    public static void ratePet(User u, Pet p, boolean like) {
        int updateVal;

        if (like) updateVal = DEFAULT_VAL;
        else updateVal = -(DEFAULT_VAL);

        updatePreferences(u, p, updateVal);
    }

    /**
     * Increments the ratings in the given <code>UserPreferences</code>
     * mapped by the criteria contained in a passed <code>Pet</code>
     * instance. The amount that the criteria ratings will be incremented by
     * is significantly larger than <code>ratePet()</code>.
     * <p/>
     * This function is intended to be used when a <code>User</code>
     * contacts the <code>AdoptionCenter</code> associated with the given
     * <code>Pet</code>.
     *
     * @param u <code>User</code>'s specific preferences
     * @param p  <code>Pet</code> to reference criteria from
     */
    public static void rateAdoptedPet(User u, Pet p) {
        updatePreferences(u, p, DEFAULT_ADOPT_VAL);
    }
}